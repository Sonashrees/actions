--------> This ticket field

const thisticketField = getFieldById("customfield_10143");
const context = await getContext();  // Correctly fetching context

/// Get the current issue ID
const issueId = context.extension.issue.id;

// Fetch the issue details to get the status
const res = await makeRequest(`/rest/api/3/issue/${issueId}`);
const issueStatusId = res.body.fields.status.id;

// Fetch roles for the current user in this project
const projectId = context.extension.project.id;
const getProjectRolesForCurrentUser = await makeRequest(`/rest/api/3/project/${projectId}/roledetails?currentMember=true`);
const roleNames = getProjectRolesForCurrentUser.body.map(item => item.name);

// Define the required role
const requiredRole = "Application Lead";

// Check if the user has the 'Dev Lead' role
const userHasRequiredRole = roleNames.includes(requiredRole);

// Logic to handle field visibility and editability
if (issueStatusId === "10038" && userHasRequiredRole) {
    // Make the fields visible and editable if the status is "10013" and the user has the 'Dev Lead' role
    thisticketField.setReadOnly(false);
} else {
    // Hide the fields if the status is not in the defined list
    thisticketField.setReadOnly(true);
}

-----------> Impact severity (High/Low)

const impactseverityField = getFieldById("customfield_10145");
const context = await getContext();  // Correctly fetching context

// Get the current project ID from the context
const projectId = context.extension.project.id;

// Fetch roles for the current user in this project
const getProjectRolesForCurrentUser = await makeRequest(`/rest/api/3/project/${projectId}/roledetails?currentMember=true`);
const roleNames = getProjectRolesForCurrentUser.body.map(item => item.name);

// Get the current issue ID
const issueId = context.extension.issue.id;

// Fetch the issue details to get the status
const res = await makeRequest(`/rest/api/3/issue/${issueId}`);
const issueStatusId = res.body.fields.status.id;

// Define the statuses where the field can be editable
const editableStatuses = ["10038"];

// Define the required roles
const requiredRoles = ["Application Lead"];

// Check if the current user has one of the required roles
const userHasRequiredRole = roleNames.some(role => requiredRoles.includes(role));

// Logic to handle field visibility and editability
if (editableStatuses.includes(issueStatusId) && userHasRequiredRole) {
    // Make the field visible and editable if the status is 10007 or 10038 and the user has the required roles
    impactseverityField.setReadOnly(false);  // Field is editable
} else {
    // In any other status or if the user doesn't have the role, the field should be visible but read-only// Field stays visible
    impactseverityField.setReadOnly(true);  // Field is read-only
}


-------> QA tab

// QA field visibility and editability based on the transitioned status and user role
const testcasesField = getFieldById("customfield_10103");
const testresultsField = getFieldById("customfield_10109");

const context = await getContext();

// Get the current issue ID
const issueId = context.extension.issue.id;

// Fetch the issue details to get the status
const res = await makeRequest(`/rest/api/3/issue/${issueId}`);
const issueStatusId = res.body.fields.status.id;

// Fetch roles for the current user in this project
const projectId = context.extension.project.id;
const getProjectRolesForCurrentUser = await makeRequest(`/rest/api/3/project/${projectId}/roledetails?currentMember=true`);
const roleNames = getProjectRolesForCurrentUser.body.map(item => item.name);

// Define the required role
const requiredRole = "QA";

// Check if the user has the 'QA' role
const userHasRequiredRole = roleNames.includes(requiredRole);

// Logic to handle field visibility and editability based on role and status
if (issueStatusId === "10014" && userHasRequiredRole) {     // Editable
    testcasesField.setReadOnly(false);  // Editable
    testresultsField.setReadOnly(false);// Editable
       // Editable
} else {
    // Hide the fields if the status is not in the defined list
    testcasesField.setReadOnly(true);
    testresultsField.setReadOnly(true);
}


----------> Infosec tab

const infosecreportField = getFieldById("customfield_10129");
const pleaseField = getFieldById("customfield_10128");

const context = await getContext();

// Get the current issue ID
const issueId = context.extension.issue.id;

// Fetch the issue details to get the status
const res = await makeRequest(`/rest/api/3/issue/${issueId}`);
const issueStatusId = res.body.fields.status.id;

// Fetch roles for the current user in this project
const projectId = context.extension.project.id;
const getProjectRolesForCurrentUser = await makeRequest(`/rest/api/3/project/${projectId}/roledetails?currentMember=true`);
const roleNames = getProjectRolesForCurrentUser.body.map(item => item.name);

// Define the required role
const requiredRole = "Infosec Lead";

// Check if the user has the 'QA' role
const userHasRequiredRole = roleNames.includes(requiredRole);

// Logic to handle field visibility and editability based on role and status
if (issueStatusId === "10023" && userHasRequiredRole) {
    // Make the fields visible and editable if the status is "10014" and the user has the 'QA' role
    infosecreportField.setReadOnly(false);
    pleaseField.setReadOnly(false); // Editable
    
   } else {
    infosecreportField.setReadOnly(true);
    pleaseField.setReadOnly(true);
}


---------> UAT Tab

//QA field visibility based on the transitioned status
const testcasesuatField = getFieldById("customfield_10153");
const testresultsField = getFieldById("customfield_10154");
const attachField = getFieldById("customfield_10156");
const context = await getContext();

const issueId = context.extension.issue.id;
const res = await makeRequest(`/rest/api/3/issue/${issueId}`);

const issueStatusId = res.body.fields.status.id;
const projectId = context.extension.project.id;
const getProjectRolesForCurrentUser = await makeRequest(`/rest/api/3/project/${projectId}/roledetails?currentMember=true`);
const roleNames = getProjectRolesForCurrentUser.body.map(item => item.name);

const requiredRole = "Business Users";
const userHasRequiredRole = roleNames.includes(requiredRole);

if (issueStatusId === "10015" && userHasRequiredRole) {
    testcasesuatField.setReadOnly(false);
    testresultsField.setReadOnly(false);
    attachField.setReadOnly(false);
} else {
    testcasesuatField.setReadOnly(true);
    testresultsField.setReadOnly(true);
    attachField.setReadOnly(true);
}

----------> dev tab

// QA field visibility and editability based on the transitioned status and user role
const startdateField = getFieldById("customfield_10167");
const enddateField = getFieldById("customfield_10140");
const fsField = getFieldById("customfield_10097");
const tsField = getFieldById("customfield_10098");
const sitField = getFieldById("customfield_10117");
const uatField = getFieldById("customfield_10118");
const trnumbersField = getFieldById("customfield_10168");

const context = await getContext();

// Get the current issue ID
const issueId = context.extension.issue.id;

// Fetch the issue details to get the status
const res = await makeRequest(`/rest/api/3/issue/${issueId}`);
const issueStatusId = res.body.fields.status.id;

// Fetch roles for the current user in this project
const projectId = context.extension.project.id;
const getProjectRolesForCurrentUser = await makeRequest(`/rest/api/3/project/${projectId}/roledetails?currentMember=true`);
const roleNames = getProjectRolesForCurrentUser.body.map(item => item.name);

// Define the required role
const requiredRole = "Dev Lead";

// Check if the user has the 'Dev Lead' role
const userHasRequiredRole = roleNames.includes(requiredRole);

// Logic to handle field visibility and editability based on role and status
if (issueStatusId === "10013" && userHasRequiredRole) {    
    startdateField.setReadOnly(false); // Editable
    enddateField.setReadOnly(false);   // Editable
    fsField.setReadOnly(false);        // Editable
    tsField.setReadOnly(false);        // Editable
    sitField.setReadOnly(false);       // Editable
    uatField.setReadOnly(false);   
    trnumbersField.setReadOnly(false);    // Editable  // Editable

} else {
    startdateField.setReadOnly(true);  // Read-only
    enddateField.setReadOnly(true);    // Read-only
    fsField.setReadOnly(true);         // Read-only
    tsField.setReadOnly(true);         // Read-only
    sitField.setReadOnly(true);        // Read-only
    uatField.setReadOnly(true);
    trnumbersField.setReadOnly(true);        // Read-only
} 
