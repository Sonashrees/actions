# Notify Application lead when ticket is not updated from past 3 days.

import groovy.json.JsonSlurper

// Define constants
def JQL_QUERY = 'project = "SAP - SANDBOX " AND updated <= -3d AND "Application Lead" IS NOT EMPTY AND status NOT IN (Closed,"Closed - Complete",Done,Reject,"Create Bug Fix","Testing Complete")'
def MAX_RESULTS = 50
def jiraBaseUrl = "https://spnitech.atlassian.net"
def applicationLeadFieldId = "customfield_10148" // Replace with the custom field ID of "Application Lead"

// HTTP request to search for issues
def response = get("/rest/api/2/search")
    .queryString("jql", JQL_QUERY)
    .queryString("maxResults", MAX_RESULTS)
    .queryString("fields", "summary,assignee,comment,status,updated,${applicationLeadFieldId}")
    .asObject(Map)

// Handle errors in the response
if (response.status != 200) {
    logger.error("Failed to fetch issues: ${response.status} ${response.body}")
    return
}

// Parse the issues
def issues = response.body.issues
issues.each { issue ->
    def issueKey = issue.key
    def issueSummary = issue.fields.summary
    def issueUrl = "${jiraBaseUrl}/browse/${issueKey}"
    def applicationLead = issue.fields[applicationLeadFieldId]

    // Check if Application Lead field has data
    if (applicationLead) {
        def leadName = applicationLead.displayName
        def leadEmail = applicationLead.emailAddress
        def leadAccountId = applicationLead.accountId

        // Construct the notification details
        def messageBody = """
            <p>Hi <b>${leadName}</b>,</p>
            <p>This is a friendly reminder that the issue <a href="${issueUrl}">${issueKey}</a> has not changed status for the past 3 days.</p>
            <p>Issue Summary: ${issueSummary}</p>
            <p>Please review and update the status as needed.</p>
        """

        // Check if leadEmail or leadAccountId is available
        if (leadEmail || leadAccountId) {
            def notificationPayload = [
                subject : "Reminder: Action required on issue ${issueKey}",
                htmlBody: messageBody,
                to      : leadEmail ? [emailAddress: leadEmail] : [accountId: leadAccountId]
            ]

            logger.info("Notification Payload for ${issueKey}: ${notificationPayload}")

            // Send the notification
            def sendNotification = post("/rest/api/2/issue/${issueKey}/notify")
                .header("Content-Type", "application/json")
                .body(notificationPayload)
                .asString()

            // Log the result of the notification
            if (sendNotification.status == 204) {
                logger.info("Notification successfully sent to ${leadName} for issue ${issueKey}")
            } else {
                logger.error("Failed to send notification for issue ${issueKey}: ${sendNotification.status} ${sendNotification.body}")
            }
        } else {
            logger.warn("No email or account ID found for Application Lead of issue ${issueKey}. Skipping notification.")
        }
    } else {
        logger.warn("Application Lead is not assigned for issue ${issueKey}. Skipping notification.")
    }
}
